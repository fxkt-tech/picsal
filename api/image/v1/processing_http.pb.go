// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             (unknown)
// source: image/v1/processing.proto

package imagev1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProcessingServiceClip = "/image.v1.ProcessingService/Clip"
const OperationProcessingServiceCreateJob = "/image.v1.ProcessingService/CreateJob"
const OperationProcessingServiceScale = "/image.v1.ProcessingService/Scale"

type ProcessingServiceHTTPServer interface {
	// Clip 图片裁剪
	Clip(context.Context, *ClipRequest) (*ImageStreamResponse, error)
	// CreateJob 新建一个图片任务
	CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error)
	// Scale 图片反转
	// 图片缩放
	Scale(context.Context, *ScaleRequest) (*ImageStreamResponse, error)
}

func RegisterProcessingServiceHTTPServer(s *http.Server, srv ProcessingServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/proc/create", _ProcessingService_CreateJob0_HTTP_Handler(srv))
	r.GET("/v1/proc/filter/clip", _ProcessingService_Clip0_HTTP_Handler(srv))
	r.GET("/v1/proc/filter/scale", _ProcessingService_Scale0_HTTP_Handler(srv))
}

func _ProcessingService_CreateJob0_HTTP_Handler(srv ProcessingServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateJobRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessingServiceCreateJob)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateJob(ctx, req.(*CreateJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateJobResponse)
		return ctx.Result(200, reply)
	}
}

func _ProcessingService_Clip0_HTTP_Handler(srv ProcessingServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClipRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessingServiceClip)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Clip(ctx, req.(*ClipRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImageStreamResponse)
		return ctx.Result(200, reply)
	}
}

func _ProcessingService_Scale0_HTTP_Handler(srv ProcessingServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ScaleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProcessingServiceScale)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Scale(ctx, req.(*ScaleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImageStreamResponse)
		return ctx.Result(200, reply)
	}
}

type ProcessingServiceHTTPClient interface {
	Clip(ctx context.Context, req *ClipRequest, opts ...http.CallOption) (rsp *ImageStreamResponse, err error)
	CreateJob(ctx context.Context, req *CreateJobRequest, opts ...http.CallOption) (rsp *CreateJobResponse, err error)
	Scale(ctx context.Context, req *ScaleRequest, opts ...http.CallOption) (rsp *ImageStreamResponse, err error)
}

type ProcessingServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewProcessingServiceHTTPClient(client *http.Client) ProcessingServiceHTTPClient {
	return &ProcessingServiceHTTPClientImpl{client}
}

func (c *ProcessingServiceHTTPClientImpl) Clip(ctx context.Context, in *ClipRequest, opts ...http.CallOption) (*ImageStreamResponse, error) {
	var out ImageStreamResponse
	pattern := "/v1/proc/filter/clip"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProcessingServiceClip))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProcessingServiceHTTPClientImpl) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...http.CallOption) (*CreateJobResponse, error) {
	var out CreateJobResponse
	pattern := "/v1/proc/create"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProcessingServiceCreateJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProcessingServiceHTTPClientImpl) Scale(ctx context.Context, in *ScaleRequest, opts ...http.CallOption) (*ImageStreamResponse, error) {
	var out ImageStreamResponse
	pattern := "/v1/proc/filter/scale"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProcessingServiceScale))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
