// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: image/v1/processing.proto

package imagev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProcessingService_CreateJob_FullMethodName = "/image.v1.ProcessingService/CreateJob"
	ProcessingService_Clip_FullMethodName      = "/image.v1.ProcessingService/Clip"
	ProcessingService_Scale_FullMethodName     = "/image.v1.ProcessingService/Scale"
)

// ProcessingServiceClient is the client API for ProcessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessingServiceClient interface {
	// 新建一个图片任务
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error)
	// 图片裁剪
	Clip(ctx context.Context, in *ClipRequest, opts ...grpc.CallOption) (*ImageStreamResponse, error)
	// 图片反转
	// 图片缩放
	Scale(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*ImageStreamResponse, error)
}

type processingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessingServiceClient(cc grpc.ClientConnInterface) ProcessingServiceClient {
	return &processingServiceClient{cc}
}

func (c *processingServiceClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error) {
	out := new(CreateJobResponse)
	err := c.cc.Invoke(ctx, ProcessingService_CreateJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processingServiceClient) Clip(ctx context.Context, in *ClipRequest, opts ...grpc.CallOption) (*ImageStreamResponse, error) {
	out := new(ImageStreamResponse)
	err := c.cc.Invoke(ctx, ProcessingService_Clip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processingServiceClient) Scale(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*ImageStreamResponse, error) {
	out := new(ImageStreamResponse)
	err := c.cc.Invoke(ctx, ProcessingService_Scale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessingServiceServer is the server API for ProcessingService service.
// All implementations should embed UnimplementedProcessingServiceServer
// for forward compatibility
type ProcessingServiceServer interface {
	// 新建一个图片任务
	CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error)
	// 图片裁剪
	Clip(context.Context, *ClipRequest) (*ImageStreamResponse, error)
	// 图片反转
	// 图片缩放
	Scale(context.Context, *ScaleRequest) (*ImageStreamResponse, error)
}

// UnimplementedProcessingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProcessingServiceServer struct {
}

func (UnimplementedProcessingServiceServer) CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedProcessingServiceServer) Clip(context.Context, *ClipRequest) (*ImageStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clip not implemented")
}
func (UnimplementedProcessingServiceServer) Scale(context.Context, *ScaleRequest) (*ImageStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scale not implemented")
}

// UnsafeProcessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessingServiceServer will
// result in compilation errors.
type UnsafeProcessingServiceServer interface {
	mustEmbedUnimplementedProcessingServiceServer()
}

func RegisterProcessingServiceServer(s grpc.ServiceRegistrar, srv ProcessingServiceServer) {
	s.RegisterService(&ProcessingService_ServiceDesc, srv)
}

func _ProcessingService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessingServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessingService_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessingServiceServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessingService_Clip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessingServiceServer).Clip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessingService_Clip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessingServiceServer).Clip(ctx, req.(*ClipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessingService_Scale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessingServiceServer).Scale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessingService_Scale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessingServiceServer).Scale(ctx, req.(*ScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessingService_ServiceDesc is the grpc.ServiceDesc for ProcessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image.v1.ProcessingService",
	HandlerType: (*ProcessingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _ProcessingService_CreateJob_Handler,
		},
		{
			MethodName: "Clip",
			Handler:    _ProcessingService_Clip_Handler,
		},
		{
			MethodName: "Scale",
			Handler:    _ProcessingService_Scale_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "image/v1/processing.proto",
}
